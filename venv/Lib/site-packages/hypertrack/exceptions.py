import http.client as httplib
import json


class HyperTrackException(Exception):
    def __init__(self, status=None, title=None, detail=None, type=None, instance=None, code=None, **kwargs):
        """
        Problem exception
        :param status: The HTTP status code generated by the origin server for this occurrence of the problem.
        :type status: int
        :param title: A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to
                      occurrence of the problem, except for purposes of localisation.
        :type title: str
        :param detail: An human readable explanation specific to this occurrence of the problem.
        :type detail: str
        :param type: An absolute URI that identifies the problem type.  When dereferenced, it SHOULD provide
                     human-readable documentation for the problem type (e.g., using HTML).  When this member is not
                     present its value is assumed to be "about:blank".
        :type: type: str
        :param instance: An absolute URI that identifies the specific occurrence of the problem.  It may or may not
                         yield further information if dereferenced.
        :type instance: str
        """
        self.status = status
        self.title = title
        self.detail = detail
        self.type = type
        self.code = code
        self.instance = instance
        self.kwargs = kwargs

    def to_dict(self):
        problem_dict = {}
        if self.status:
            try:
                problem_dict['status'] = int(self.status)
                if (not self.title or self.title == 'about:blank') and self.status in httplib.responses:
                    problem_dict['title'] = httplib.responses[self.status]
            except Exception as e:
                pass

        if self.title:
            problem_dict['title'] = str(self.title)

        if self.detail:
            problem_dict['detail'] = str(self.detail)

        if self.type:
            problem_dict['type'] = str(self.type)

        if self.code:
            problem_dict['code'] = str(self.code)

        if self.instance:
            problem_dict['instance'] = str(self.instance)

        problem_dict.update(self.kwargs)

        return problem_dict

    def to_http_response(self, headers=None, cors=False):
        body = self.to_dict()

        if not headers:
            headers = {}

        headers['Content-Language'] = 'en-US'

        if cors:
            headers['Access-Control-Allow-Origin'] = '*'

        has_content_type = False
        for header in headers:
            if header.lower() == 'content-type':
                has_content_type = True

        if not has_content_type:
            headers['Content-Type'] = 'application/json'

        return {
            'statusCode': self.status,
            'body': json.dumps(body),
            'headers': headers
        }

    def __str__(self):
        return self.title or self.code or self.status

    def __repr__(self):
        return str(self)
